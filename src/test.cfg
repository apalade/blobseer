# Version manager configuration
vmanager: {
    # The host name of the version manager
    host = "localhost";
    # The name of the service (tcp port number) to listen to
    service = "2222";
};
 
# Provider manager configuration
pmanager: {
    host = "localhost";
    service = "1111";
};

# Provider configuration
provider: {
    service = "1235";
    # Maximal number of pages to be cached
    cacheslots = 5;
    # Update rate: when reaching this number of updates report to provider manager
    urate = 100;
    dbname = "/tmp/blobseer/provider/db/provider.db";
    # Total space available to store pages, in MB (512MB here)
    space = 512;
    # How often (in secs) to sync stored pages
    sync = 10;
};

# Built in DHT service configuration
sdht: {
    # Maximal number of hash values to be cached
    cacheslots = 10;
    dbname = "/tmp/blobseer/sdht/db/sdht.db";
    # Total space available to store hash values, in MB (32MB here)
    space = 32;
    # How often (in secs) to sync stored hash values
    sync = 10;
};

# Client side DHT access interface configuration
dht: {
    # The service name of the DHT service (currently tcp port number the provider listens to)
    service = "1234";
    # List of machines running the builtin dht (sdht)
    gateways = (
	"localhost"
    );
    # How many times to try before giving up
    retry = 1;
    # How many seconds to wait for response
    timeout = 10;
    # How big the client's cache for dht entries is
    cachesize = 1048576;
};


### Configuration options for the Dynamic Deployment module ###
dd: {
    max_cycles = 1;                  # how many successful iterations
    sleep_between_cycles = 0;        # seconds
    sleep_no_active_providers = 0;   # seconds

    scripts: {
      start: "scripts/start.sh";
      stop: "scripts/stop.sh";
    };

    repo: {
          db: {
            driver = "postgresql";
            name = "mon_data";
            host = "marius";
            port = "5432";
            user = "mon_user";
            pass = "mon_pass";
          };
      };

     # Limits above (add) and below (remove) to which we'll take actions
     # agains the number of data providers in the pool
     thresholds: {
        remove = 0.6;
        add = 0.01;
     };

     specifications: {
        # Targets that should compute our factor on
        #   e.g.: "every", "all", "192.168.1.1"
        targets: {
          t1: "every";  # each provider in the system
          t2: "all";    # all providers in the system
        };

        intervals: {
          i1: (6000);            # 10 minutes earlier to now
          i2: (600, -1);         # the same --> -1 = now()
          i3: (600, 300);        # 10 minutes earlier to 5 minutes earlier
        };

        # Conditions that might be satisfied by a factor
        conditions: {
          c1: {
            upper = 65.0;
            lower = 63.0;
            weight = 0.1;
            implementation = "condition_general";
          };

          # Free space conditions
          free_c1: {
            upper = 1.0;
            lower = 0.7;
            weight = 0.6;
            implementation = "condition_general";
          };
          free_c2: {
            upper = 0.69;
            lower = 0.4;
            weight = 0.35;
            implementation = "condition_general";
          };
          free_c3: {
            upper = 0.39;
            lower = 0.0;
            weight = 0.05;
            implementation = "condition_general";
          };

          # Reads/Writes per time unit conditions
          rws_c1: {
            upper = 0.01;
            lower = 0.0;
            weight = 0.7;
            implementation = "condition_rws";
          };
          rws_c2: {
            upper = 2.99;
            lower = 0.01;
            weight = 0.2;
            implementation = "condition_rws";
          };
          rws_c3: {
            upper = 99999.9;
            lower = 3.0;
            weight = 0.1;
            implementation = "condition_rws";
          };
        };

        # Factors that can be combined in a scenario
        factors: {
          # Free space
          free_space: {
            conditions: ("free_c1", "free_c2");      # The sum of conditions' weight MUST be 1
            name: "free";                            # This should be in the database if using a general implementation
            type: "physical";                        # "physical" / "internal"
            weight: 0.6;
            interval: "i1";
            implementation = "factor_general";
          };

          # Reads per unit of time
          reads_per_time: {
            conditions: ("rws_c1", "rws_c2", "rws_c3");        # The sum of conditions' weight MUST be 1
            name: "blob_id";                                   # Can't be anything here as long as it's valid
            type: "internal";                                  # "physical" / "internal"
            weight: 0.6;
            interval: "i1";
            implementation = "factor_read";
          };

          # Writes per unit of time
          writes_per_time: {
            conditions: ("rws_c1", "rws_c2", "rws_c3");        # The sum of conditions' weight MUST be 1
            name: "blob_id";                                   # Can't be anything here as long as it's valid
            type: "internal";                                  # "physical" / "internal"
            weight: 0.4;
            interval: "i1";
            implementation = "factor_write";
          };
        };

        scenarios: {
          s1: {
            factors: (                 # The sum of factors' weights MUST be 1
                      "reads_per_time",
                      "writes_per_time");
            target: "t1";
          };
        };
     };
};
